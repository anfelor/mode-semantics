
defns
typing :: '' ::=

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terms  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
    l1 <= l2 :: :: lsub :: 'LSub_'
by

----------------- :: Ord
global <= local

defn
    o1 <= o2 :: :: osub :: 'OSub_'
by

-------------- :: Ord
many <= once

defn
    u1 <= u2 :: :: usub :: 'USub_'
by

----------------- :: Ord
unique <= shared


defn
    m1 <= m2 :: :: msub :: 'MSub_'
by

l1 <= l2
o1 <= o2
u1 <= u2
-------------------------- :: Ord
<l1,o1,u1> <= <l1,o1,u1>


defn
    G |- e : t @ m :: :: term_ :: 'E_'
      {{ tex [[G]] \mathrel{\vdash} [[e]] \mathbin{:} [[t]] \mathbin{@} [[m]] }}
    
by

G |- e : t @ m1
m1 <= m2
---------------------------- :: Sub
G |- e : t @ m2


l1 <= l2
o1 <= o2
u1 <= u2
l1 <= li all locks li oi in G2
o1 <= oi all locks li oi in G2
dual(oi) <= u2 all locks li oi in G2
-------------------------------------------------- :: Var
G1; x : t @ <l1,o1,u1>; G2 |- x : t @ <l2,o2,u2>


l1 <= l2
l1 <= li all locks li uo in G2
--------------------------------------------------------- :: Aliased
G1; x : t @ <l1,many,uu>; G2 |- x_a : t @ <l2,uo,shared>


G; lock(l,o); x : t1 @ m1 |- e : t2 @ m2
-------------------------------------------------- :: Abs
G |- fn x.e : (t1 @ m1 -> t2 @ m2) @ <l,o,uu>


G |- e1 : (t1 @ m1 -> t2 @ m2) @ m3
G |- e2 : t1 @ m1
--------------------------------------------- :: App
G |- e1 e2 : t2 @ m2


G |- e1 : t1 @ m
G |- e2 : t2 @ m
---------------------------------- :: Pair
G |- ( e1 , e2 ) : t1 * t2 @ m


G |- e1 : t1 * t2 @ m1
G; x1 : t1 @ m1; x2 : t2 @ m1 |- e2 : t3 @ m2
----------------------------------------------- :: Unpair
G |- let ( x1 , x2 ) = e1 in e2 : t3 @ m2


----------------- :: Unit
G |- () : unit @ m


G |- e1 : unit @ m1
G |- e2 : t @ m2
---------------------- :: Sequence
G |- e1; e2 : t @ m2


G |- e : t1 @ m
-------------------------- :: Left
G |- inl e : t1 + t2 @ m


G |- e : t2 @ m
-------------------------- :: Right
G |- inr e : t1 + t2 @ m


G |- e1 : t1 + t2 @ m1
G; x1 : t1 @ m1 |- e2 : t3 @ m2
G; x2 : t2 @ m1 |- e3 : t3 @ m2
--------------------------------------------------- :: Case
G |- case e1 (inl x1. e2) (inr x2. e3) : t3 @ m2


G |- e : t @ <global,o,u>
--------------------------------- :: Region
G |- region e : t @ <global,o,u>


G |- e1 : t1 @ <ul,many,uu>
G; x : t1 @ <local,uo,shared> |- e2 : t2 @ <global,o,u>
-------------------------------------------------------- :: Borrow
G |- borrow e1 as x in e2 : t2 @ <global,o,u>


G |- e : t @ <global,many,uu>
------------------------------ :: Ref
G |- ref e : t @ m


G |- e : t ref @ m
------------------------------ :: Read
G |- !e : t @ <ul,uo,shared>


G |- e1 : t ref @ m1
G |- e2 : t @ <global,many,uu>
------------------------------- :: Write
G |- e1 := e2 : unit @ m2


G |- e1 : t1 ref @ <l,uo,unique>
G |- e2 : t2 @ <global,many,uu>
----------------------------------------------- :: Update
G |- reuse e1 with e2 : t2 ref @ <l,uo,uu>
